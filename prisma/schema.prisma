generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Baner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Brand {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  label       String
  description String
  logo        String
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  products Product[]
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  subcategory Subcategory[]
  products    Product[]
}

model Subcategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  @@index([categoryId])
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  value     Float
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  priceVariant   PriceVariant? @relation(fields: [priceVariantId], references: [id])
  priceVariantId String?       @db.ObjectId
}

model PriceVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  price     Float
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  sizes     Size[]
  orderItem OrderItem[]
  Product   Product?    @relation(fields: [productId], references: [id])
  productId String?     @db.ObjectId
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  discount    Int?
  rating      Float?
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  images        Image[]
  priceVariants PriceVariant[]
  category      Category?      @relation(fields: [categoryId], references: [id])
  categoryId    String?        @db.ObjectId
  brand         Brand?         @relation(fields: [brandId], references: [id])
  brandId       String?        @db.ObjectId
  wishlist      Wishlist[]

  @@index([categoryId])
  @@index([brandId])
  @@fulltext([title])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  userName  String
  payment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
  address    Address     @relation(fields: [addressId], references: [id])
  addressId  String      @db.ObjectId
}

model OrderItem {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  title          String
  measure        String
  imageUrl       String
  brand          String
  category       String
  price          Float
  discount       Int?
  quantity       Float
  orderId        String        @db.ObjectId
  order          Order         @relation(fields: [orderId], references: [id])
  priceVariant   PriceVariant? @relation(fields: [priceVariantId], references: [id])
  priceVariantId String?       @db.ObjectId

  @@index([orderId])
}

model Address {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  phone   String
  address String
  town    String
  postal  Float
  Order   Order[]
}

model Wishlist {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  isWishlisted Boolean
  product      Product @relation(fields: [productId], references: [id])
  productId    String  @db.ObjectId
}
